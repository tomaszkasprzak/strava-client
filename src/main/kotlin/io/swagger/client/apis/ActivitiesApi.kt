/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* OpenAPI spec version: 3.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.ActivityZone
import io.swagger.client.models.Comment
import io.swagger.client.models.DetailedActivity
import io.swagger.client.models.Fault
import io.swagger.client.models.Lap
import io.swagger.client.models.SummaryActivity
import io.swagger.client.models.SummaryAthlete
import io.swagger.client.models.UpdatableActivity

import io.swagger.client.infrastructure.*

class ActivitiesApi(basePath: kotlin.String = "https://www.strava.com/api/v3") : ApiClient(basePath) {

    /**
    * Create an Activity
    * Creates a manual activity for an athlete, requires activity:write scope.
    * @param name The name of the activity. 
    * @param sportType Sport type of activity. For example - Run, MountainBikeRide, Ride, etc. 
    * @param startDateLocal ISO 8601 formatted date time. 
    * @param elapsedTime In seconds. 
    * @param type Type of activity. For example - Run, Ride etc. (optional)
    * @param description Description of the activity. (optional)
    * @param distance In meters. (optional)
    * @param trainer Set to 1 to mark as a trainer activity. (optional)
    * @param commute Set to 1 to mark as commute. (optional)
    * @return DetailedActivity
    */
    @Suppress("UNCHECKED_CAST")
    fun createActivity(name: kotlin.String, sportType: kotlin.String, startDateLocal: java.time.LocalDateTime, elapsedTime: kotlin.Int, type: kotlin.String, description: kotlin.String, distance: kotlin.Float, trainer: kotlin.Int, commute: kotlin.Int) : DetailedActivity {
        val localVariableBody: kotlin.Any? = mapOf("name" to name, "type" to type, "sport_type" to sportType, "start_date_local" to startDateLocal, "elapsed_time" to elapsedTime, "description" to description, "distance" to distance, "trainer" to trainer, "commute" to commute)
        
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/activities",
            headers = localVariableHeaders
        )
        val response = request<DetailedActivity>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailedActivity
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Activity
    * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
    * @param id The identifier of the activity. 
    * @param includeAllEfforts To include all segments efforts. (optional)
    * @return DetailedActivity
    */
    @Suppress("UNCHECKED_CAST")
    fun getActivityById(id: kotlin.Long, includeAllEfforts: kotlin.Boolean) : DetailedActivity {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (includeAllEfforts != null) {
                put("include_all_efforts", listOf(includeAllEfforts.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/activities/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
        )
        val response = request<DetailedActivity>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailedActivity
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Activity Comments
    * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
    * @param id The identifier of the activity. 
    * @param page Deprecated. Prefer to use after_cursor. (optional)
    * @param perPage Deprecated. Prefer to use page_size. (optional, default to 30)
    * @param pageSize Number of items per page. Defaults to 30. (optional, default to 30)
    * @param afterCursor Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched. (optional)
    * @return kotlin.Array<Comment>
    */
    @Suppress("UNCHECKED_CAST")
    fun getCommentsByActivityId(id: kotlin.Long, page: kotlin.Int, perPage: kotlin.Int, pageSize: kotlin.Int, afterCursor: kotlin.String) : kotlin.Array<Comment> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (perPage != null) {
                put("per_page", listOf(perPage.toString()))
            }
            if (pageSize != null) {
                put("page_size", listOf(pageSize.toString()))
            }
            if (afterCursor != null) {
                put("after_cursor", listOf(afterCursor.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/activities/{id}/comments".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
        )
        val response = request<kotlin.Array<Comment>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Comment>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Activity Kudoers
    * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
    * @param id The identifier of the activity. 
    * @param page Page number. Defaults to 1. (optional)
    * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
    * @return kotlin.Array<SummaryAthlete>
    */
    @Suppress("UNCHECKED_CAST")
    fun getKudoersByActivityId(id: kotlin.Long, page: kotlin.Int, perPage: kotlin.Int) : kotlin.Array<SummaryAthlete> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (perPage != null) {
                put("per_page", listOf(perPage.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/activities/{id}/kudos".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
        )
        val response = request<kotlin.Array<SummaryAthlete>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SummaryAthlete>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Activity Laps
    * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
    * @param id The identifier of the activity. 
    * @return kotlin.Array<Lap>
    */
    @Suppress("UNCHECKED_CAST")
    fun getLapsByActivityId(id: kotlin.Long) : kotlin.Array<Lap> {
        val localVariableBody: kotlin.Any? = null
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/activities/{id}/laps".replace("{"+"id"+"}", "$id"),
        )
        val response = request<kotlin.Array<Lap>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Lap>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Athlete Activities
    * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
    * @param before An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)
    * @param after An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)
    * @param page Page number. Defaults to 1. (optional)
    * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
    * @return kotlin.Array<SummaryActivity>
    */
    @Suppress("UNCHECKED_CAST")
    fun getLoggedInAthleteActivities(before: kotlin.Int, after: kotlin.Int, page: kotlin.Int, perPage: kotlin.Int) : kotlin.Array<SummaryActivity> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (before != null) {
                put("before", listOf(before.toString()))
            }
            if (after != null) {
                put("after", listOf(after.toString()))
            }
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (perPage != null) {
                put("per_page", listOf(perPage.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/athlete/activities",
            query = localVariableQuery,
        )
        val response = request<kotlin.Array<SummaryActivity>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SummaryActivity>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Activity Zones
    * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
    * @param id The identifier of the activity. 
    * @return kotlin.Array<ActivityZone>
    */
    @Suppress("UNCHECKED_CAST")
    fun getZonesByActivityId(id: kotlin.Long) : kotlin.Array<ActivityZone> {
        val localVariableBody: kotlin.Any? = null
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/activities/{id}/zones".replace("{"+"id"+"}", "$id"),
        )
        val response = request<kotlin.Array<ActivityZone>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ActivityZone>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Update Activity
    * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
    * @param id The identifier of the activity. 
    * @param body  (optional)
    * @return DetailedActivity
    */
    @Suppress("UNCHECKED_CAST")
    fun updateActivityById(id: kotlin.Long, body: UpdatableActivity) : DetailedActivity {
        val localVariableBody: kotlin.Any? = body
        

        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/activities/{id}".replace("{"+"id"+"}", "$id"),
        )
        val response = request<DetailedActivity>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailedActivity
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
