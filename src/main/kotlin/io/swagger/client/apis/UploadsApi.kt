/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* OpenAPI spec version: 3.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.Fault
import io.swagger.client.models.Upload

import io.swagger.client.infrastructure.*

class UploadsApi(basePath: kotlin.String = "https://www.strava.com/api/v3") : ApiClient(basePath) {

    /**
    * Upload Activity
    * Uploads a new data file to create an activity from. Requires activity:write scope.
    * @param file The uploaded file. (optional)
    * @param name The desired name of the resulting activity. (optional)
    * @param description The desired description of the resulting activity. (optional)
    * @param trainer Whether the resulting activity should be marked as having been performed on a trainer. (optional)
    * @param commute Whether the resulting activity should be tagged as a commute. (optional)
    * @param dataType The format of the uploaded file. (optional)
    * @param externalId The desired external identifier of the resulting activity. (optional)
    * @return Upload
    */
    @Suppress("UNCHECKED_CAST")
    fun createUpload(file: java.io.File, name: kotlin.String, description: kotlin.String, trainer: kotlin.String, commute: kotlin.String, dataType: kotlin.String, externalId: kotlin.String) : Upload {
        val localVariableBody: kotlin.Any? = mapOf("file" to file, "name" to name, "description" to description, "trainer" to trainer, "commute" to commute, "data_type" to dataType, "external_id" to externalId)
        
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Content-Type"] = "multipart/form-data"
        localVariableHeaders["Accept"] = "application/json"

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/uploads",
            headers = localVariableHeaders
        )
        val response = request<Upload>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Upload
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Upload
    * Returns an upload for a given identifier. Requires activity:write scope.
    * @param uploadId The identifier of the upload. 
    * @return Upload
    */
    @Suppress("UNCHECKED_CAST")
    fun getUploadById(uploadId: kotlin.Long) : Upload {
        val localVariableBody: kotlin.Any? = null
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/uploads/{uploadId}".replace("{"+"uploadId"+"}", "$uploadId"),
        )
        val response = request<Upload>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Upload
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
