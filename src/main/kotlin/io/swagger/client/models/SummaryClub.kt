/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* OpenAPI spec version: 3.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models

import io.swagger.client.models.ActivityType
import io.swagger.client.models.MetaClub

/**
 * 
 * @param profileMedium URL to a 60x60 pixel profile picture.
 * @param coverPhoto URL to a ~1185x580 pixel cover photo.
 * @param coverPhotoSmall URL to a ~360x176  pixel cover photo.
 * @param sportType Deprecated. Prefer to use activity_types.
 * @param activityTypes The activity types that count for a club. This takes precedence over sport_type.
 * @param city The club's city.
 * @param state The club's state or geographical region.
 * @param country The club's country.
 * @param &#x60;private&#x60; Whether the club is private.
 * @param memberCount The club's member count.
 * @param featured Whether the club is featured or not.
 * @param verified Whether the club is verified or not.
 * @param url The club's vanity URL.
 */
data class SummaryClub (
    /* URL to a 60x60 pixel profile picture. */
    val profileMedium: kotlin.String? = null,
    /* URL to a ~1185x580 pixel cover photo. */
    val coverPhoto: kotlin.String? = null,
    /* URL to a ~360x176  pixel cover photo. */
    val coverPhotoSmall: kotlin.String? = null,
    /* Deprecated. Prefer to use activity_types. */
    val sportType: SportType? = null,
    /* The activity types that count for a club. This takes precedence over sport_type. */
    val activityTypes: kotlin.Array<ActivityType>? = null,
    /* The club's city. */
    val city: kotlin.String? = null,
    /* The club's state or geographical region. */
    val state: kotlin.String? = null,
    /* The club's country. */
    val country: kotlin.String? = null,
    /* Whether the club is private. */
    val `private`: kotlin.Boolean? = null,
    /* The club's member count. */
    val memberCount: kotlin.Int? = null,
    /* Whether the club is featured or not. */
    val featured: kotlin.Boolean? = null,
    /* Whether the club is verified or not. */
    val verified: kotlin.Boolean? = null,
    /* The club's vanity URL. */
    val url: kotlin.String? = null,
) {








    /**
    * Deprecated. Prefer to use activity_types.
    * Values: CYCLING,RUNNING,TRIATHLON,OTHER
    */
    enum class SportType(val value: kotlin.String){
    
        CYCLING("cycling"),
    
        RUNNING("running"),
    
        TRIATHLON("triathlon"),
    
        OTHER("other");
    
    }




















}

