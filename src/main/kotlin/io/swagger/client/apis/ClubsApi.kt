/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* OpenAPI spec version: 3.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.ClubActivity
import io.swagger.client.models.ClubAthlete
import io.swagger.client.models.DetailedClub
import io.swagger.client.models.Fault
import io.swagger.client.models.SummaryAthlete
import io.swagger.client.models.SummaryClub

import io.swagger.client.infrastructure.*

class ClubsApi(basePath: kotlin.String = "https://www.strava.com/api/v3") : ApiClient(basePath) {

    /**
    * List Club Activities
    * Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
    * @param id The identifier of the club. 
    * @param page Page number. Defaults to 1. (optional)
    * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
    * @return kotlin.Array<ClubActivity>
    */
    @Suppress("UNCHECKED_CAST")
    fun getClubActivitiesById(id: kotlin.Long, page: kotlin.Int, perPage: kotlin.Int) : kotlin.Array<ClubActivity> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (perPage != null) {
                put("per_page", listOf(perPage.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/clubs/{id}/activities".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
        )
        val response = request<kotlin.Array<ClubActivity>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ClubActivity>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Club Administrators
    * Returns a list of the administrators of a given club.
    * @param id The identifier of the club. 
    * @param page Page number. Defaults to 1. (optional)
    * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
    * @return kotlin.Array<SummaryAthlete>
    */
    @Suppress("UNCHECKED_CAST")
    fun getClubAdminsById(id: kotlin.Long, page: kotlin.Int, perPage: kotlin.Int) : kotlin.Array<SummaryAthlete> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (perPage != null) {
                put("per_page", listOf(perPage.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/clubs/{id}/admins".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
        )
        val response = request<kotlin.Array<SummaryAthlete>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SummaryAthlete>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Club
    * Returns a given club using its identifier.
    * @param id The identifier of the club. 
    * @return DetailedClub
    */
    @Suppress("UNCHECKED_CAST")
    fun getClubById(id: kotlin.Long) : DetailedClub {
        val localVariableBody: kotlin.Any? = null
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/clubs/{id}".replace("{"+"id"+"}", "$id"),
        )
        val response = request<DetailedClub>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailedClub
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Club Members
    * Returns a list of the athletes who are members of a given club.
    * @param id The identifier of the club. 
    * @param page Page number. Defaults to 1. (optional)
    * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
    * @return kotlin.Array<ClubAthlete>
    */
    @Suppress("UNCHECKED_CAST")
    fun getClubMembersById(id: kotlin.Long, page: kotlin.Int, perPage: kotlin.Int) : kotlin.Array<ClubAthlete> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (perPage != null) {
                put("per_page", listOf(perPage.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/clubs/{id}/members".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
        )
        val response = request<kotlin.Array<ClubAthlete>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ClubAthlete>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Athlete Clubs
    * Returns a list of the clubs whose membership includes the authenticated athlete.
    * @param page Page number. Defaults to 1. (optional)
    * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
    * @return kotlin.Array<SummaryClub>
    */
    @Suppress("UNCHECKED_CAST")
    fun getLoggedInAthleteClubs(page: kotlin.Int, perPage: kotlin.Int) : kotlin.Array<SummaryClub> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (perPage != null) {
                put("per_page", listOf(perPage.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/athlete/clubs",
            query = localVariableQuery,
        )
        val response = request<kotlin.Array<SummaryClub>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SummaryClub>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
