/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* OpenAPI spec version: 3.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.DetailedSegment
import io.swagger.client.models.ExplorerResponse
import io.swagger.client.models.Fault
import io.swagger.client.models.SummarySegment

import io.swagger.client.infrastructure.*

class SegmentsApi(basePath: kotlin.String = "https://www.strava.com/api/v3") : ApiClient(basePath) {

    /**
    * Explore segments
    * Returns the top 10 segments matching a specified query.
    * @param bounds The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude] 
    * @param activityType Desired activity type. (optional)
    * @param minCat The minimum climbing category. (optional)
    * @param maxCat The maximum climbing category. (optional)
    * @return ExplorerResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun exploreSegments(bounds: kotlin.Array<kotlin.Float>, activityType: kotlin.String, minCat: kotlin.Int, maxCat: kotlin.Int) : ExplorerResponse {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("bounds", toMultiValue(bounds.toList(), "csv"))
            if (activityType != null) {
                put("activity_type", listOf(activityType.toString()))
            }
            if (minCat != null) {
                put("min_cat", listOf(minCat.toString()))
            }
            if (maxCat != null) {
                put("max_cat", listOf(maxCat.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/segments/explore",
            query = localVariableQuery,
        )
        val response = request<ExplorerResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ExplorerResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Starred Segments
    * List of the authenticated athlete&#39;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
    * @param page Page number. Defaults to 1. (optional)
    * @param perPage Number of items per page. Defaults to 30. (optional, default to 30)
    * @return kotlin.Array<SummarySegment>
    */
    @Suppress("UNCHECKED_CAST")
    fun getLoggedInAthleteStarredSegments(page: kotlin.Int, perPage: kotlin.Int) : kotlin.Array<SummarySegment> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (perPage != null) {
                put("per_page", listOf(perPage.toString()))
            }
        }
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/segments/starred",
            query = localVariableQuery,
        )
        val response = request<kotlin.Array<SummarySegment>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SummarySegment>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Segment
    * Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
    * @param id The identifier of the segment. 
    * @return DetailedSegment
    */
    @Suppress("UNCHECKED_CAST")
    fun getSegmentById(id: kotlin.Long) : DetailedSegment {
        val localVariableBody: kotlin.Any? = null
        

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/segments/{id}".replace("{"+"id"+"}", "$id"),
        )
        val response = request<DetailedSegment>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailedSegment
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Star Segment
    * Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
    * @param id The identifier of the segment to star. 
    * @param starred If true, star the segment; if false, unstar the segment. 
    * @return DetailedSegment
    */
    @Suppress("UNCHECKED_CAST")
    fun starSegment(id: kotlin.Long, starred: kotlin.Boolean) : DetailedSegment {
        val localVariableBody: kotlin.Any? = mapOf("starred" to starred)
        
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/segments/{id}/starred".replace("{"+"id"+"}", "$id"),
            headers = localVariableHeaders
        )
        val response = request<DetailedSegment>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DetailedSegment
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
