/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* OpenAPI spec version: 3.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models

import io.swagger.client.models.ActivityType
import io.swagger.client.models.SportType

/**
 * 
 * @param commute Whether this activity is a commute
 * @param trainer Whether this activity was recorded on a training machine
 * @param hideFromHome Whether this activity is muted
 * @param description The description of the activity
 * @param name The name of the activity
 * @param type Deprecated. Prefer to use sport_type. In a request where both type and sport_type are present, this field will be ignored
 * @param sportType 
 * @param gearId Identifier for the gear associated with the activity. ‘none’ clears gear from activity
 */
data class UpdatableActivity (
    /* Whether this activity is a commute */
    val commute: kotlin.Boolean? = null,
    /* Whether this activity was recorded on a training machine */
    val trainer: kotlin.Boolean? = null,
    /* Whether this activity is muted */
    val hideFromHome: kotlin.Boolean? = null,
    /* The description of the activity */
    val description: kotlin.String? = null,
    /* The name of the activity */
    val name: kotlin.String? = null,
    /* Deprecated. Prefer to use sport_type. In a request where both type and sport_type are present, this field will be ignored */
    val type: ActivityType? = null,
    val sportType: SportType? = null,
    /* Identifier for the gear associated with the activity. ‘none’ clears gear from activity */
    val gearId: kotlin.String? = null,
) {

}

