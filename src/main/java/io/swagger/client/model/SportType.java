/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * An enumeration of the sport types an activity may have. Distinct from ActivityType in that it has new types (e.g. MountainBikeRide)
 */
@JsonAdapter(SportType.Adapter.class)
public enum SportType {
  
  ALPINESKI("AlpineSki"),
  
  BACKCOUNTRYSKI("BackcountrySki"),
  
  BADMINTON("Badminton"),
  
  CANOEING("Canoeing"),
  
  CROSSFIT("Crossfit"),
  
  EBIKERIDE("EBikeRide"),
  
  ELLIPTICAL("Elliptical"),
  
  EMOUNTAINBIKERIDE("EMountainBikeRide"),
  
  GOLF("Golf"),
  
  GRAVELRIDE("GravelRide"),
  
  HANDCYCLE("Handcycle"),
  
  HIGHINTENSITYINTERVALTRAINING("HighIntensityIntervalTraining"),
  
  HIKE("Hike"),
  
  ICESKATE("IceSkate"),
  
  INLINESKATE("InlineSkate"),
  
  KAYAKING("Kayaking"),
  
  KITESURF("Kitesurf"),
  
  MOUNTAINBIKERIDE("MountainBikeRide"),
  
  NORDICSKI("NordicSki"),
  
  PICKLEBALL("Pickleball"),
  
  PILATES("Pilates"),
  
  RACQUETBALL("Racquetball"),
  
  RIDE("Ride"),
  
  ROCKCLIMBING("RockClimbing"),
  
  ROLLERSKI("RollerSki"),
  
  ROWING("Rowing"),
  
  RUN("Run"),
  
  SAIL("Sail"),
  
  SKATEBOARD("Skateboard"),
  
  SNOWBOARD("Snowboard"),
  
  SNOWSHOE("Snowshoe"),
  
  SOCCER("Soccer"),
  
  SQUASH("Squash"),
  
  STAIRSTEPPER("StairStepper"),
  
  STANDUPPADDLING("StandUpPaddling"),
  
  SURFING("Surfing"),
  
  SWIM("Swim"),
  
  TABLETENNIS("TableTennis"),
  
  TENNIS("Tennis"),
  
  TRAILRUN("TrailRun"),
  
  VELOMOBILE("Velomobile"),
  
  VIRTUALRIDE("VirtualRide"),
  
  VIRTUALROW("VirtualRow"),
  
  VIRTUALRUN("VirtualRun"),
  
  WALK("Walk"),
  
  WEIGHTTRAINING("WeightTraining"),
  
  WHEELCHAIR("Wheelchair"),
  
  WINDSURF("Windsurf"),
  
  WORKOUT("Workout"),
  
  YOGA("Yoga");

  private String value;

  SportType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static SportType fromValue(String text) {
    for (SportType b : SportType.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<SportType> {
    @Override
    public void write(final JsonWriter jsonWriter, final SportType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public SportType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return SportType.fromValue(String.valueOf(value));
    }
  }
}

