/**
* Strava API v3
* The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
*
* OpenAPI spec version: 3.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models

import io.swagger.client.models.ActivityType
import io.swagger.client.models.DetailedSegmentEffort
import io.swagger.client.models.Lap
import io.swagger.client.models.LatLng
import io.swagger.client.models.MetaAthlete
import io.swagger.client.models.PhotosSummary
import io.swagger.client.models.PolylineMap
import io.swagger.client.models.Split
import io.swagger.client.models.SportType
import io.swagger.client.models.SummaryActivity
import io.swagger.client.models.SummaryGear

/**
 * 
 * @param description The description of the activity
 * @param photos 
 * @param gear 
 * @param calories The number of kilocalories consumed during this activity
 * @param segmentEfforts 
 * @param deviceName The name of the device used to record the activity
 * @param embedToken The token used to embed a Strava activity
 * @param splitsMetric The splits of this activity in metric units (for runs)
 * @param splitsStandard The splits of this activity in imperial units (for runs)
 * @param laps 
 * @param bestEfforts 
 */
data class DetailedActivity (
    /* The description of the activity */
    val description: kotlin.String? = null,
    val photos: PhotosSummary? = null,
    val gear: SummaryGear? = null,
    /* The number of kilocalories consumed during this activity */
    val calories: kotlin.Float? = null,
    val segmentEfforts: kotlin.Array<DetailedSegmentEffort>? = null,
    /* The name of the device used to record the activity */
    val deviceName: kotlin.String? = null,
    /* The token used to embed a Strava activity */
    val embedToken: kotlin.String? = null,
    /* The splits of this activity in metric units (for runs) */
    val splitsMetric: kotlin.Array<Split>? = null,
    /* The splits of this activity in imperial units (for runs) */
    val splitsStandard: kotlin.Array<Split>? = null,
    val laps: kotlin.Array<Lap>? = null,
    val bestEfforts: kotlin.Array<DetailedSegmentEffort>? = null,
) {

}

